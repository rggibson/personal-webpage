<?xml version="1.0" encoding="UTF-8"?>

<Academia>

<Interest>
<ID>games</ID>
<Title>Artificial Intelligence in Adversarial Games</Title>
<Image>rock-paper-scissors.png</Image>
<Details><![CDATA[
<p>
With the <a href="http://poker.cs.ualberta.ca">Computer Poker Research Group</a> at the <a href="http://ualberta.ca">University of Alberta</a>, my research investigates game-theoretic solutions to large imperfect information games.  
There have been recent successes in Nash equilibrium computation of large two-player zero-sum games (see, for example, <a href="http://books.nips.cc/papers/files/nips20/NIPS2007_0682.pdf">Zinkevich et al. 2008</a>).  
These advances were the driving force behind the program <i>Polaris</i> that defeated a team of humans pros at heads-up limit Texas hold'em.  
In large games involving more than two players, however, Nash equilibria are much harder to compute and are a less attractive solution concept compared to the zero-sum case.  
The main focus of my Ph.D. research is in understanding what types of solution concepts are desirable in games involving more than two players and how we can compute such solutions.  
I have also spent some time improving the efficiency of our equilibrium solvers for zero-sum games (<a href="static/work/12aamas-pcs/12aamas-pcs-paper.pdf">Johanson et al. 2012</a>, <a href="static/work/12nips-as/12nips-as-paper.pdf">Gibson et al. 2012</a>).
</p>
<p>
Besides computer poker, I am interested in a number of other projects in adversarial games.  
Firstly, the <a href="http://t.co/ALB1rIGZ">StarCraft AI Competition</a> is an annual event that has competitors attempting to create the strongest computer player for the popular real-time strategy game. 
StarCraft is a far more challenging domain than poker as actions must be taken several times per second and the state space is massive in comparison. 
Secondly, the <a href="http://tac.sics.se/page.php?id=1">Trading Agent Competition (TAC)</a> is an annual event at the AAAI conference. 
TAC includes a number of different competitions, including ad auctions for on-line markets and automated supply chain management.
Many problems and characteristics that arise in TAC, such as multiple adversaries, opponent modelling, and bid optimization, are quite similar to those arising in computer poker. 
One of my research goals is to apply my work from computer poker to problems in the TAC domain. 
Thirdly, I am interested in the <a href="http://games.stanford.edu/">General Game Playing (GGP) Competition</a>.  
In GGP, competitors write programs capable of playing games without having any prior knowledge as to what game is going to be played. 
Thus, a single GGP program must be capable of playing competently in a wide variety of games, from chess, to poker, to even solo puzzles like the Rubik's Cube. 
The nature of GGP is really at the heart of AI where we want to develop one program that can succeed at many different, potentially unrelated tasks. 
Finally, I am very interested in applying <a href="academia?t=sports">artificial intelligence in sports</a>.
</p>
]]></Details>
</Interest>

<Interest>
<ID>sports</ID>
<Title>Artificial Intelligence in Sports</Title>
<Image>sports-strategy.jpg</Image>
<Details><![CDATA[
<p>
There are many strategical elements involved in several of the most popular sports played around the world. 
Players and managers are under intense pressure and often must make important decisions very quickly. 
Can we mathematically or computationally determine what the <i>optimal</i> decisions are? 
Several examples of such possible decisions come to mind:
<ul>
  <li>Hockey</li>
  <ul>
    <li>When should the goalie be pulled for an extra attacker?</li>
    <li>In a shootout / penalty shot, should the player shoot or deke?</li>
  </ul>
  <li>Tennis</li>
  <ul>
    <li>How often should a player utilize the drop shot?</li>
    <li>When is it best to play safer shots vs. going for more aggressive winners?</li>
    <li>What is the best way to mix-up a player's serve to keep the receiver off balance?</li>
  </ul>
  <li>Baseball</li>
  <ul>
    <li>What is the best way to mix between pitches (fastball, curveball, change-up, etc.) to keep the hitter off-balance?</li>
    <li>When should one steal?  Hit-and-run?  Intentionally walk the hitter?  Sacrifice bunt?  Bring in a relief pitcher?  I could go on...</li>
  </ul>
  <li>Soccer</li>
  <ul>
    <li>During a penalty shootout, where should the player shoot?</li>
    <li>Should the manager use all of his or her substitutions early, or save a few in case of injuries?</li>
    <li>What formations are most effective against different opponents?</li>
  </ul>
  <li>Football</li>
  <ul>
    <li>How should plays be called? For example, how often should a fake punt or fake field goal be attempted?</li>
  </ul>
  <li>Cricket</li>
  <ul>
    <li>When should batters bat aggressively versus conservatively?</li>
    <li>Is it more advantageous to bat first or second?</li>
  </ul>
  <li>Professional Sports Drafts</li>
  <ul>
    <li>What is the best strategy for picking players during an entry / rookie draft? This problem partly motivated my research project that investigated strategies for drafting territories in the board game Risk (<a href="static/work/10aiide-risk/10aiide-risk-paper.pdf">Gibson, Desai, and Zhao 2010</a>).</li>
  </ul>
</ul>
Some of these problems could lend themselves well to a mathematical formulation in an attempt to "solve" for optimal play. 
Others may be too difficult to solve exactly and we may be better off searching for computational algorithms that perform well in practice. 
Furthermore, today's state-of-the-art sports video games are very good job at simulating their respective sport. 
I believe these games could provide a testbed for research into not only making the AI for these games stronger, but also to help answer some of these questions within their real-life versions of these sports.
</p>
]]></Details>
</Interest>

<Interest>
<ID>vids</ID>
<Title>Artificial Intelligence in Video Games</Title>
<Image>ghost.png</Image>
<Details><![CDATA[
<p>
Video games are a fun and challenging platform for advancing artificial intelligence techniques. 
Game development is currently a multi-billion dollar industry and the extreme popularity of video games makes them a good showcase for demonstrating artificial intelligence research.
</p>

<p>
One intriguing project in this area is the Atari AI Project using <a href="http://www.arcadelearningenvironment.org/">The Arcade Learning Environment</a>. 
The goal of this project is to create a single program that can play any Atari 2600 game well, even if the program has never seen the particular game before. 
The motivation is similar to that of the <a href="http://games.stanford.edu/">General Game Playing Competition</a>: we want to develop AI programs that are general and can accomplish a wide variety of different tasks. 
In the Atari project, the program receives the image on the screen and must decide how to act in order to maximize the player's total score. 
The program does not know the rules of the game, which objects on the screen are enemies, or even which character on the screen the program controls. 
All of this information must be learned by the program.  
This is a very challenging task that advocates generality and is potentially applicable across many other AI domains. 
</p>

<p>
In addition, the <a href="http://www.marioai.org/home">Mario AI Championship</a> has become an annual event involving a number of different problems based on the classic <i>Super Mario Bros.</i> Nintendo games. 
There are a number of different competition tracks, including game play, level generation, learning, and Turing test.  
For example, in the level generation competition, the goal is to develop a procedural method that creates Mario levels that are as <i>fun</i> as possible. 
To evaluate fun, human judges play the automatically generated levels and score each based on how much they enjoyed the level. 
While I have never competed in the Mario AI Championship, I did enter a related Mario event in the 2009 Reinforcement Learning Competition and earned second place. 
</p>

<p>
Other interesting problems include the <a href="http://t.co/ALB1rIGZ">StarCraft AI Competition</a>, where teams compete to create the strongest programs for the popular real-time strategy game. 
Finally, I am interested in the widely studied area of pathfinding in video games. 
A good example of this is PRA* (<a href="http://webdocs.cs.ualberta.ca/~nathanst/papers/partialpathfinding.pdf">Sturtevant and Buro 2005</a>), whioch was later implemented into the pathfinding engine of Bioware's <i>Dragon Age: Origins</i> role playing game. 
</p>
]]></Details>
</Interest>

<Interest>
<ID>music</ID>
<Title>Computer Music</Title>
<Youtube_ID>2kuY3BrmTfQ</Youtube_ID>
<Details><![CDATA[
<p>
While there are many problems associated with computers and music, I am particularly interested in developing a computer program that can actually interpret and <i>create</i> music. 
Unlike games such as poker that have specific rules that must be followed, music is an extremely unconstrained domain with no obvious set of goal states. 
This makes music creation extremely challenging for computer programs. 
Nonetheless, researchers have developed algorithms capable of composing remarkable scores, such as in the attached video. 
I am interested in further improving music creation programs and creating AI solutions to transform audio signals into written scores.  
</p>
]]></Details>
</Interest>

</Academia>
