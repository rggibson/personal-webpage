<?xml version="1.0" encoding="UTF-8"?>

<Projects>

<Project>
<Project_ID>poker</Project_ID>
<Title>Computer Poker</Title>
<Youtube_ID>ScXX2bndGJc</Youtube_ID>
<Details><![CDATA[
<p>I am a former member of the <a href="http://poker.cs.ualberta.ca">Computer Poker Research Group (CPRG)</a> at the University of Alberta. 
Much like how IBM's Deep Blue defeated the world's best chess player in 1997, the CPRG's goal is to develop computer poker programs capable of defeating the world's best Texas hold'em players. 
Unlike chess, poker involves stochastic events through random card deals, varying degrees of outcomes from different pot sizes, and imperfect information resulting from private hole cards. 
These complications make poker a more challening game for computers to play than other traditional games like checkers or chess.</p>

<p>In the <a href="http://poker.cs.ualberta.ca/man-machine/2007/">first official Man vs. Machine poker competition</a>, our program <i>Polaris</i> played against two poker pros, Phil Laak (video, above) and Ali Eslami, in heads-up limit Texas hold'em. 
The pros narrowly defeated Polaris in a 4-round match. 
The following year, an improved <a href="http://poker.cs.ualberta.ca/man-machine/">Polaris defeated a team of heads-up limit experts</a>. 
Recently, we played a few exhibition matches against human pros in heads-up no-limit hold'em with promising results. 
In addition, each year the CPRG competes in the <a href="http://www.computerpokercompetition.org">Annual Computer Poker Competition</a>. 
In this competition, teams of academics and hobbyists submit poker-playing programs that play millions of hands of poker against one another.  
As of 2013, the CPRG has won 24 of 41 events while placing in the top 3 in all but one event.</p>
]]></Details>
</Project>

<Project>
<Project_ID>risk</Project_ID>
<Title>AI for the Board Game RISK</Title>
<Image>risk.png</Image>
<Details><![CDATA[
<p>As part of a Ph.D. course project with a team of 2 other students, I wrote a computer program that played the board game RISK.
Given a short time frame to complete the project, we focused just on one aspect of the game, namely the opening <i>draft</i> of territories.
In this opening phase of the game, players alternate selecting starting territories on the board until all territories are occupied by some player.
This mechanism resembles a rookie player draft in many professional sports leagues and this relationship was actually my main motivation for working on this project.
Our program won significantly more matches than the agents supplied with <a href="http://sillysoft.net/lux/">Lux Delux</a>, a computer version of RISK.
We later published our work and I presented the paper at Stanford during an AI conference.</p>
]]></Details>
</Project>

<Project>
<Project_ID>mario</Project_ID>
<Title>A Learning AI for Super Mario Bros.</Title>
<Youtube_ID>EZLkCdMXw8g</Youtube_ID>
<Details><![CDATA[
<p>As part of a team of 2 students, I developed an automated agent that plays randomly generated levels of <a href="https://mojang.com/notch/mario/">Infinite Super Mario Bros</a>. 
In this version, the level environments were also randomly generated, changing things such as Mario's jump height, speed, and even his objectives (whether to collect coins, kill enemies, complete levels, etc.). 
Thus, the goal of this project was to create a Mario agent that could successfully learn and adapt to changes in the environment. 
We submitted our agent to the Mario event of the 2009 Reinforcement Learning Competition where our agent earned second place.
An early version of this agent is seen in the video above.</p>
]]></Details>
</Project>

<Project>
<Project_ID>scheduling</Project_ID>
<Title>Automated Sports Scheduling for Video Games</Title>
<Image>sports-schedule.png</Image>
<Details><![CDATA[
<p>I briefly worked on a solo project that considered the problem of generating schedules for a sports league, particularly for sports video games. 
Real world professional sports schedules often take months of computation to generate, and thus many sports games only contain a small number of hard-coded league schedules for the games' season modes.
In this project, I looked at relaxing the constraints required for real-world professional leagues in order to efficiently generate random sports schedules of user-defined size.
My preliminary results indicate that dynamic, efficient scheduling is possible using <a href="http://en.wikipedia.org/wiki/Answer_set_programming">answer set programming</a> and could be implemented in modern video games.</p>
]]></Details>
</Project>

<Project>
<Project_ID>golay</Project_ID>
<Title>Barker and Golay Sequences</Title>
<Image>golay.png</Image>
<Details><![CDATA[
<p>As a Master's student in the <a href="http://www.math.sfu.ca/">Mathematics Department at Simon Fraser University</a>, I studied problems related to the combinatorial sequences known as Barker sequences and Golay sequences. 
These are sequences, typically binary or quaternary, that occur infrequently and have applications in coding theory, particularly in radar and multislit spectrometry. 
My work studied the structure of these sequences, explained how the known sequences at small lengths are generated, and proved that certain classes of these sequences do not exist beyond the known small lengths.</p>
]]></Details>
</Project>

<Project>
<Project_ID>graphs</Project_ID>
<Title>Graph Theory - Universal Fixers</Title>
<Image>graph-theory.png</Image>
<Details><![CDATA[
<p>Much of my early research was in graph theory during my time as an undergraduate in <a href="http://www.uvic.ca/science/math-statistics/">Mathematics at the University of Victoria</a>.
Graph theory deals with the study of nodes (dots) connected by edges (lines) that can be used to represent many different entities, from simple games to even on-line networks.
I considered problems regarding a special class of graphs known as <i>universal fixers</i>.
Universal fixers were conjectured (now proven) to not exist beyond simple, trivial examples. 
My main result proves that every nontrivial <a href="http://en.wikipedia.org/wiki/Bipartite_graph">bipartite graph</a> is not a universal fixer.</p> 
]]></Details>
</Project>

</Projects>
